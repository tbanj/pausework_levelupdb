'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _debug = require('debug');

var _debug2 = _interopRequireDefault(_debug);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var debug = new _debug2.default('dotenv-parse-variables');

var DEFAULT_OPTIONS = {
  assignToProcessEnv: true,
  overrideProcessEnv: false
};

exports.default = function (env, options) {
  var envOptions = Object.assign({}, DEFAULT_OPTIONS, options || {});

  Object.keys(env).forEach(function (key) {
    debug('key "' + key + '" before type was ' + _typeof(env[key]));
    env[key] = parseKey(env[key], key);
    debug('key "' + key + '" after type was ' + _typeof(env[key]));

    if (envOptions.assignToProcessEnv === true) {
      if (envOptions.overrideProcessEnv === true) {
        process.env[key] = env[key] || process.env[key];
      } else {
        process.env[key] = process.env[key] || env[key];
      }
    }
  });

  return env;
};

function parseKey(value, key) {

  debug('parsing key ' + key + ' with value ' + value);

  // if the value is wrapped in bacticks e.g. (`value`) then just return its value
  if (value.toString().indexOf('`') === 0 && value.toString().lastIndexOf('`') === value.toString().length - 1) {
    debug('key ' + key + ' is wrapped in bacticks and will be ignored from parsing');
    return value.toString().substring(1, value.toString().length - 1);
  }

  // if the value ends in an asterisk then just return its value
  if (value.toString().lastIndexOf('*') === value.toString().length - 1 && value.toString().indexOf(',') === -1) {
    debug('key ' + key + ' ended in * and will be ignored from parsing');
    return value.toString().substring(0, value.toString().length - 1);
  }

  // Boolean
  if (value.toLowerCase() === 'true' || value.toLowerCase() === 'false') {
    debug('key ' + key + ' parsed as a Boolean');
    return value === 'true';
  }

  // Number
  if (!isNaN(value)) {
    debug('key ' + key + ' parsed as a Number');
    return Number(value);
  }

  // Array
  if (value.indexOf(',') !== -1) {
    debug('key ' + key + ' parsed as an Array');
    return value.split(',').map(parseKey);
  }

  return value;
}
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9pbmRleC5qcyJdLCJuYW1lcyI6WyJkZWJ1ZyIsIkRlYnVnIiwiREVGQVVMVF9PUFRJT05TIiwiYXNzaWduVG9Qcm9jZXNzRW52Iiwib3ZlcnJpZGVQcm9jZXNzRW52IiwiZW52Iiwib3B0aW9ucyIsImVudk9wdGlvbnMiLCJPYmplY3QiLCJhc3NpZ24iLCJrZXlzIiwiZm9yRWFjaCIsImtleSIsInBhcnNlS2V5IiwicHJvY2VzcyIsInZhbHVlIiwidG9TdHJpbmciLCJpbmRleE9mIiwibGFzdEluZGV4T2YiLCJsZW5ndGgiLCJzdWJzdHJpbmciLCJ0b0xvd2VyQ2FzZSIsImlzTmFOIiwiTnVtYmVyIiwic3BsaXQiLCJtYXAiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQ0E7Ozs7OztBQUVBLElBQU1BLFFBQVEsSUFBSUMsZUFBSixDQUFVLHdCQUFWLENBQWQ7O0FBRUEsSUFBTUMsa0JBQWtCO0FBQ3RCQyxzQkFBb0IsSUFERTtBQUV0QkMsc0JBQW9CO0FBRkUsQ0FBeEI7O2tCQUtlLFVBQUNDLEdBQUQsRUFBTUMsT0FBTixFQUFrQjtBQUMvQixNQUFNQyxhQUFhQyxPQUFPQyxNQUFQLENBQWMsRUFBZCxFQUFrQlAsZUFBbEIsRUFBbUNJLFdBQVcsRUFBOUMsQ0FBbkI7O0FBRUFFLFNBQU9FLElBQVAsQ0FBWUwsR0FBWixFQUFpQk0sT0FBakIsQ0FBeUIsZUFBTztBQUM5Qlgsb0JBQWNZLEdBQWQsa0NBQTZDUCxJQUFJTyxHQUFKLENBQTdDO0FBQ0FQLFFBQUlPLEdBQUosSUFBV0MsU0FBU1IsSUFBSU8sR0FBSixDQUFULEVBQW1CQSxHQUFuQixDQUFYO0FBQ0FaLG9CQUFjWSxHQUFkLGlDQUE0Q1AsSUFBSU8sR0FBSixDQUE1Qzs7QUFFQSxRQUFJTCxXQUFXSixrQkFBWCxLQUFrQyxJQUF0QyxFQUE0QztBQUMxQyxVQUFJSSxXQUFXSCxrQkFBWCxLQUFrQyxJQUF0QyxFQUE0QztBQUMxQ1UsZ0JBQVFULEdBQVIsQ0FBWU8sR0FBWixJQUFtQlAsSUFBSU8sR0FBSixLQUFZRSxRQUFRVCxHQUFSLENBQVlPLEdBQVosQ0FBL0I7QUFDRCxPQUZELE1BRU87QUFDTEUsZ0JBQVFULEdBQVIsQ0FBWU8sR0FBWixJQUFtQkUsUUFBUVQsR0FBUixDQUFZTyxHQUFaLEtBQW9CUCxJQUFJTyxHQUFKLENBQXZDO0FBQ0Q7QUFDRjtBQUNGLEdBWkQ7O0FBY0EsU0FBT1AsR0FBUDtBQUVELEM7O0FBRUQsU0FBU1EsUUFBVCxDQUFrQkUsS0FBbEIsRUFBeUJILEdBQXpCLEVBQThCOztBQUU1QloseUJBQXFCWSxHQUFyQixvQkFBdUNHLEtBQXZDOztBQUVBO0FBQ0EsTUFBSUEsTUFBTUMsUUFBTixHQUFpQkMsT0FBakIsQ0FBeUIsR0FBekIsTUFBa0MsQ0FBbEMsSUFDQ0YsTUFBTUMsUUFBTixHQUFpQkUsV0FBakIsQ0FBNkIsR0FBN0IsTUFBc0NILE1BQU1DLFFBQU4sR0FBaUJHLE1BQWpCLEdBQTBCLENBRHJFLEVBQ3dFO0FBQ3RFbkIsbUJBQWFZLEdBQWI7QUFDQSxXQUFPRyxNQUFNQyxRQUFOLEdBQWlCSSxTQUFqQixDQUEyQixDQUEzQixFQUE4QkwsTUFBTUMsUUFBTixHQUFpQkcsTUFBakIsR0FBMEIsQ0FBeEQsQ0FBUDtBQUNEOztBQUVEO0FBQ0EsTUFBSUosTUFBTUMsUUFBTixHQUFpQkUsV0FBakIsQ0FBNkIsR0FBN0IsTUFBc0NILE1BQU1DLFFBQU4sR0FBaUJHLE1BQWpCLEdBQTBCLENBQWhFLElBQ0NKLE1BQU1DLFFBQU4sR0FBaUJDLE9BQWpCLENBQXlCLEdBQXpCLE1BQWtDLENBQUMsQ0FEeEMsRUFDMkM7QUFDekNqQixtQkFBYVksR0FBYjtBQUNBLFdBQU9HLE1BQU1DLFFBQU4sR0FBaUJJLFNBQWpCLENBQTJCLENBQTNCLEVBQThCTCxNQUFNQyxRQUFOLEdBQWlCRyxNQUFqQixHQUEwQixDQUF4RCxDQUFQO0FBQ0Q7O0FBRUQ7QUFDQSxNQUFJSixNQUFNTSxXQUFOLE9BQXdCLE1BQXhCLElBQWtDTixNQUFNTSxXQUFOLE9BQXdCLE9BQTlELEVBQXVFO0FBQ3JFckIsbUJBQWFZLEdBQWI7QUFDQSxXQUFPRyxVQUFVLE1BQWpCO0FBQ0Q7O0FBRUQ7QUFDQSxNQUFJLENBQUNPLE1BQU1QLEtBQU4sQ0FBTCxFQUFtQjtBQUNqQmYsbUJBQWFZLEdBQWI7QUFDQSxXQUFPVyxPQUFPUixLQUFQLENBQVA7QUFDRDs7QUFFRDtBQUNBLE1BQUlBLE1BQU1FLE9BQU4sQ0FBYyxHQUFkLE1BQXVCLENBQUMsQ0FBNUIsRUFBK0I7QUFDN0JqQixtQkFBYVksR0FBYjtBQUNBLFdBQU9HLE1BQU1TLEtBQU4sQ0FBWSxHQUFaLEVBQWlCQyxHQUFqQixDQUFxQlosUUFBckIsQ0FBUDtBQUNEOztBQUVELFNBQU9FLEtBQVA7QUFFRCIsImZpbGUiOiJpbmRleC5qcyIsInNvdXJjZXNDb250ZW50IjpbIlxuaW1wb3J0IERlYnVnIGZyb20gJ2RlYnVnJztcblxuY29uc3QgZGVidWcgPSBuZXcgRGVidWcoJ2RvdGVudi1wYXJzZS12YXJpYWJsZXMnKTtcblxuY29uc3QgREVGQVVMVF9PUFRJT05TID0ge1xuICBhc3NpZ25Ub1Byb2Nlc3NFbnY6IHRydWUsXG4gIG92ZXJyaWRlUHJvY2Vzc0VudjogZmFsc2Vcbn07XG5cbmV4cG9ydCBkZWZhdWx0IChlbnYsIG9wdGlvbnMpID0+IHtcbiAgY29uc3QgZW52T3B0aW9ucyA9IE9iamVjdC5hc3NpZ24oe30sIERFRkFVTFRfT1BUSU9OUywgb3B0aW9ucyB8fCB7fSk7XG5cbiAgT2JqZWN0LmtleXMoZW52KS5mb3JFYWNoKGtleSA9PiB7XG4gICAgZGVidWcoYGtleSBcIiR7a2V5fVwiIGJlZm9yZSB0eXBlIHdhcyAke3R5cGVvZiBlbnZba2V5XX1gKTtcbiAgICBlbnZba2V5XSA9IHBhcnNlS2V5KGVudltrZXldLCBrZXkpO1xuICAgIGRlYnVnKGBrZXkgXCIke2tleX1cIiBhZnRlciB0eXBlIHdhcyAke3R5cGVvZiBlbnZba2V5XX1gKTtcblxuICAgIGlmIChlbnZPcHRpb25zLmFzc2lnblRvUHJvY2Vzc0VudiA9PT0gdHJ1ZSkge1xuICAgICAgaWYgKGVudk9wdGlvbnMub3ZlcnJpZGVQcm9jZXNzRW52ID09PSB0cnVlKSB7XG4gICAgICAgIHByb2Nlc3MuZW52W2tleV0gPSBlbnZba2V5XSB8fCBwcm9jZXNzLmVudltrZXldO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcHJvY2Vzcy5lbnZba2V5XSA9IHByb2Nlc3MuZW52W2tleV0gfHwgZW52W2tleV07XG4gICAgICB9XG4gICAgfVxuICB9KTtcblxuICByZXR1cm4gZW52O1xuXG59O1xuXG5mdW5jdGlvbiBwYXJzZUtleSh2YWx1ZSwga2V5KSB7XG5cbiAgZGVidWcoYHBhcnNpbmcga2V5ICR7a2V5fSB3aXRoIHZhbHVlICR7dmFsdWV9YCk7XG5cbiAgLy8gaWYgdGhlIHZhbHVlIGlzIHdyYXBwZWQgaW4gYmFjdGlja3MgZS5nLiAoYHZhbHVlYCkgdGhlbiBqdXN0IHJldHVybiBpdHMgdmFsdWVcbiAgaWYgKHZhbHVlLnRvU3RyaW5nKCkuaW5kZXhPZignYCcpID09PSAwXG4gICAgJiYgdmFsdWUudG9TdHJpbmcoKS5sYXN0SW5kZXhPZignYCcpID09PSB2YWx1ZS50b1N0cmluZygpLmxlbmd0aCAtIDEpIHtcbiAgICBkZWJ1Zyhga2V5ICR7a2V5fSBpcyB3cmFwcGVkIGluIGJhY3RpY2tzIGFuZCB3aWxsIGJlIGlnbm9yZWQgZnJvbSBwYXJzaW5nYCk7XG4gICAgcmV0dXJuIHZhbHVlLnRvU3RyaW5nKCkuc3Vic3RyaW5nKDEsIHZhbHVlLnRvU3RyaW5nKCkubGVuZ3RoIC0gMSk7XG4gIH1cblxuICAvLyBpZiB0aGUgdmFsdWUgZW5kcyBpbiBhbiBhc3RlcmlzayB0aGVuIGp1c3QgcmV0dXJuIGl0cyB2YWx1ZVxuICBpZiAodmFsdWUudG9TdHJpbmcoKS5sYXN0SW5kZXhPZignKicpID09PSB2YWx1ZS50b1N0cmluZygpLmxlbmd0aCAtIDFcbiAgICAmJiB2YWx1ZS50b1N0cmluZygpLmluZGV4T2YoJywnKSA9PT0gLTEpIHtcbiAgICBkZWJ1Zyhga2V5ICR7a2V5fSBlbmRlZCBpbiAqIGFuZCB3aWxsIGJlIGlnbm9yZWQgZnJvbSBwYXJzaW5nYCk7XG4gICAgcmV0dXJuIHZhbHVlLnRvU3RyaW5nKCkuc3Vic3RyaW5nKDAsIHZhbHVlLnRvU3RyaW5nKCkubGVuZ3RoIC0gMSk7XG4gIH1cblxuICAvLyBCb29sZWFuXG4gIGlmICh2YWx1ZS50b0xvd2VyQ2FzZSgpID09PSAndHJ1ZScgfHwgdmFsdWUudG9Mb3dlckNhc2UoKSA9PT0gJ2ZhbHNlJykge1xuICAgIGRlYnVnKGBrZXkgJHtrZXl9IHBhcnNlZCBhcyBhIEJvb2xlYW5gKTtcbiAgICByZXR1cm4gdmFsdWUgPT09ICd0cnVlJztcbiAgfVxuXG4gIC8vIE51bWJlclxuICBpZiAoIWlzTmFOKHZhbHVlKSkge1xuICAgIGRlYnVnKGBrZXkgJHtrZXl9IHBhcnNlZCBhcyBhIE51bWJlcmApO1xuICAgIHJldHVybiBOdW1iZXIodmFsdWUpO1xuICB9XG5cbiAgLy8gQXJyYXlcbiAgaWYgKHZhbHVlLmluZGV4T2YoJywnKSAhPT0gLTEpIHtcbiAgICBkZWJ1Zyhga2V5ICR7a2V5fSBwYXJzZWQgYXMgYW4gQXJyYXlgKTtcbiAgICByZXR1cm4gdmFsdWUuc3BsaXQoJywnKS5tYXAocGFyc2VLZXkpO1xuICB9XG5cbiAgcmV0dXJuIHZhbHVlO1xuXG59XG4iXX0=